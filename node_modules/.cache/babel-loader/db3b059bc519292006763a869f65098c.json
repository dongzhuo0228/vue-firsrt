{"remainingRequest":"C:\\idea_work_git\\11111111-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\idea_work_git\\11111111-vue\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\idea_work_git\\11111111-vue\\src\\axios\\api.request.js","dependencies":[{"path":"C:\\idea_work_git\\11111111-vue\\src\\axios\\api.request.js","mtime":1559284443708},{"path":"C:\\idea_work_git\\11111111-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\idea_work_git\\11111111-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\idea_work_git\\11111111-vue\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from \"axios\";\nimport index_url from \"./index\"; // create an axios instance\n\nvar service = axios.create({\n  baseURL: index_url.baseUrl.dev,\n  // url = base url + request url\n  withCredentials: true,\n  // send cookies when cross-domain requests\n  timeout: 5000 // request timeout\n\n}); // request interceptor\n\nservice.interceptors.request.use(function (config) {\n  // do something before request is sent\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); // response interceptor\n\nservice.interceptors.response.use(\n/**\r\n * If you want to get information such as headers or status\r\n * Please return  response => response\r\n */\n\n/**\r\n * Determine the request status by custom code\r\n * Here is just an example\r\n * You can also judge the status by HTTP Status Code.\r\n */\nfunction (response) {\n  var res = response.data; // if the custom code is not 20000, it is judged as an error.\n\n  if (res.code !== 20000) {\n    //   Message({\n    //     message: res.message || \"error\",\n    //     type: \"error\",\n    //     duration: 5 * 1000\n    //   });\n    // 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;\n    if (res.code === 50008 || res.code === 50012 || res.code === 50014) {// to re-login\n      // MessageBox.confirm(\n      //   \"You have been logged out, you can cancel to stay on this page, or log in again\",\n      //   \"Confirm logout\",\n      //   {\n      //     confirmButtonText: \"Re-Login\",\n      //     cancelButtonText: \"Cancel\",\n      //     type: \"warning\"\n      //   }\n      // ).then(() => {\n      //   store.dispatch(\"user/resetToken\").then(() => {\n      //     location.reload();\n      //   });\n      // });\n    }\n\n    return Promise.reject(res.message || \"error\");\n  } else {\n    return res;\n  }\n}, function (error) {\n  // Message({\n  //   message: error.message,\n  //   type: \"error\",\n  //   duration: 5 * 1000\n  // });\n  return Promise.reject(error);\n});\nexport default service;",{"version":3,"sources":["C:\\idea_work_git\\11111111-vue\\src\\axios\\api.request.js"],"names":["axios","index_url","service","create","baseURL","baseUrl","dev","withCredentials","timeout","interceptors","request","use","config","error","Promise","reject","response","res","data","code","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,gB,CACA;;AACA,IAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAEH,SAAS,CAACI,OAAV,CAAkBC,GADA;AACK;AAChCC,EAAAA,eAAe,EAAE,IAFU;AAEJ;AACvBC,EAAAA,OAAO,EAAE,IAHkB,CAGb;;AAHa,CAAb,CAAhB,C,CAMA;;AACAN,OAAO,CAACO,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CACE,UAAAC,MAAM,EAAI;AACR;AAEA,SAAOA,MAAP;AACD,CALH,EAME,UAAAC,KAAK,EAAI;AACP,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CARH,E,CAWA;;AACAX,OAAO,CAACO,YAAR,CAAqBO,QAArB,CAA8BL,GAA9B;AACE;;;;;AAKA;;;;;AAKA,UAAAK,QAAQ,EAAI;AACV,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAArB,CADU,CAGV;;AACA,MAAID,GAAG,CAACE,IAAJ,KAAa,KAAjB,EAAwB;AACtB;AACA;AACA;AACA;AACA;AAEA;AACA,QAAIF,GAAG,CAACE,IAAJ,KAAa,KAAb,IAAsBF,GAAG,CAACE,IAAJ,KAAa,KAAnC,IAA4CF,GAAG,CAACE,IAAJ,KAAa,KAA7D,EAAoE,CAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACD,WAAOL,OAAO,CAACC,MAAR,CAAeE,GAAG,CAACG,OAAJ,IAAe,OAA9B,CAAP;AACD,GAzBD,MAyBO;AACL,WAAOH,GAAP;AACD;AACF,CA3CH,EA4CE,UAAAJ,KAAK,EAAI;AACP;AACA;AACA;AACA;AACA;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAnDH;AAsDA,eAAeX,OAAf","sourcesContent":["import axios from \"axios\";\r\nimport index_url from \"./index\";\r\n// create an axios instance\r\nconst service = axios.create({\r\n  baseURL: index_url.baseUrl.dev, // url = base url + request url\r\n  withCredentials: true, // send cookies when cross-domain requests\r\n  timeout: 5000 // request timeout\r\n});\r\n\r\n// request interceptor\r\nservice.interceptors.request.use(\r\n  config => {\r\n    // do something before request is sent\r\n\r\n    return config;\r\n  },\r\n  error => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// response interceptor\r\nservice.interceptors.response.use(\r\n  /**\r\n   * If you want to get information such as headers or status\r\n   * Please return  response => response\r\n   */\r\n\r\n  /**\r\n   * Determine the request status by custom code\r\n   * Here is just an example\r\n   * You can also judge the status by HTTP Status Code.\r\n   */\r\n  response => {\r\n    const res = response.data;\r\n\r\n    // if the custom code is not 20000, it is judged as an error.\r\n    if (res.code !== 20000) {\r\n      //   Message({\r\n      //     message: res.message || \"error\",\r\n      //     type: \"error\",\r\n      //     duration: 5 * 1000\r\n      //   });\r\n\r\n      // 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;\r\n      if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\r\n        // to re-login\r\n        // MessageBox.confirm(\r\n        //   \"You have been logged out, you can cancel to stay on this page, or log in again\",\r\n        //   \"Confirm logout\",\r\n        //   {\r\n        //     confirmButtonText: \"Re-Login\",\r\n        //     cancelButtonText: \"Cancel\",\r\n        //     type: \"warning\"\r\n        //   }\r\n        // ).then(() => {\r\n        //   store.dispatch(\"user/resetToken\").then(() => {\r\n        //     location.reload();\r\n        //   });\r\n        // });\r\n      }\r\n      return Promise.reject(res.message || \"error\");\r\n    } else {\r\n      return res;\r\n    }\r\n  },\r\n  error => {\r\n    // Message({\r\n    //   message: error.message,\r\n    //   type: \"error\",\r\n    //   duration: 5 * 1000\r\n    // });\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default service;\r\n"]}]}